// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  savedImages   SavedImage[]
  savedVideos   SavedVideo[]
  preferences   UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String      @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id          String      @id @default(cuid())
  chatId      String
  role        MessageRole
  content     String      @db.Text
  images      String[]    @default([])
  metadata    Json?
  createdAt   DateTime    @default(now())
  chat        Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  generations Generation[]
}

model Generation {
  id            String          @id @default(cuid())
  messageId     String
  type          GenerationType
  status        GenerationStatus @default(PENDING)
  prompt        String          @db.Text
  provider      String
  model         String
  requestId     String?
  taskId        String?
  resultUrl     String?
  resultUrls    String[]        @default([])
  metadata      Json?
  error         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  message       Message         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  savedImages   SavedImage[]
  savedVideos   SavedVideo[]
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum GenerationType {
  TEXT_TO_IMAGE
  IMAGE_TO_IMAGE
  TEXT_TO_VIDEO
  IMAGE_TO_VIDEO
  LIPSYNC
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model SavedImage {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  prompt      String   @db.Text
  originalUrl String   @db.Text
  localPath   String   @db.Text
  fileName    String
  fileSize    Int?
  width       Int?
  height      Int?
  mimeType    String?
  generationId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  generation  Generation? @relation(fields: [generationId], references: [id], onDelete: SetNull)
}

model SavedVideo {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  prompt      String   @db.Text
  originalUrl String   @db.Text
  localPath   String   @db.Text
  fileName    String
  fileSize    Int?
  duration    Float?
  width       Int?
  height      Int?
  mimeType    String?
  generationId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  generation  Generation? @relation(fields: [generationId], references: [id], onDelete: SetNull)
}

model UserPreferences {
  id                   String           @id @default(cuid())
  userId               String           @unique
  aspectRatio          AspectRatio      @default(SQUARE)
  textToImageModel     TextToImageModel @default(SEEDREAM_V4)
  imageToImageModel    ImageToImageModel @default(SEEDREAM_V4_EDIT)
  videoModel           VideoModel       @default(VEO3_FAST)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AspectRatio {
  SQUARE          // 1:1
  PORTRAIT        // 3:4
  LANDSCAPE       // 4:3
  WIDE            // 16:9
  ULTRAWIDE       // 21:9
}

enum TextToImageModel {
  SEEDREAM_V4
  FLUX_1_1_PRO
  FLUX_1_SCHNELL
  NANO_BANANA
}

enum ImageToImageModel {
  SEEDREAM_V4_EDIT
  FLUX_1_1_PRO_EDIT
  NANO_BANANA_EDIT
}

enum VideoModel {
  VEO3_FAST
  VEO3_STANDARD
  RUNWAY_ML
}