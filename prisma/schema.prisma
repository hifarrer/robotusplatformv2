generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  chats         Chat[]
  savedImages   SavedImage[]
  savedVideos   SavedVideo[]
  savedAudios   SavedAudio[]
  sessions      Session[]
  preferences   UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id          String       @id @default(cuid())
  chatId      String
  role        MessageRole
  content     String
  images      String[]     @default([])
  metadata    Json?
  createdAt   DateTime     @default(now())
  generations Generation[]
  chat        Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Generation {
  id          String           @id @default(cuid())
  messageId   String
  type        GenerationType
  status      GenerationStatus @default(PENDING)
  prompt      String
  provider    String
  model       String
  requestId   String?
  taskId      String?
  resultUrl   String?
  resultUrls  String[]         @default([])
  metadata    Json?
  error       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  message     Message          @relation(fields: [messageId], references: [id], onDelete: Cascade)
  savedImages SavedImage[]
  savedVideos SavedVideo[]
  savedAudios SavedAudio[]
}

model SavedImage {
  id           String      @id @default(cuid())
  userId       String
  title        String?
  prompt       String
  originalUrl  String
  localPath    String
  fileName     String
  fileSize     Int?
  width        Int?
  height       Int?
  mimeType     String?
  generationId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  generation   Generation? @relation(fields: [generationId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedVideo {
  id           String      @id @default(cuid())
  userId       String
  title        String?
  prompt       String
  originalUrl  String
  localPath    String
  fileName     String
  fileSize     Int?
  duration     Float?
  width        Int?
  height       Int?
  mimeType     String?
  generationId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  generation   Generation? @relation(fields: [generationId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedAudio {
  id           String      @id @default(cuid())
  userId       String
  title        String?
  prompt       String
  originalUrl  String
  localPath    String
  fileName     String
  fileSize     Int?
  duration     Float?
  voiceId      String?
  language     String?
  generationId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  generation   Generation? @relation(fields: [generationId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                String            @id @default(cuid())
  userId            String            @unique
  aspectRatio       AspectRatio       @default(PORTRAIT)
  textToImageModel  TextToImageModel  @default(SEEDREAM_V4)
  imageToImageModel ImageToImageModel @default(SEEDREAM_V4_EDIT)
  videoModel        VideoModel        @default(WAN_2_5)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum GenerationType {
  TEXT_TO_IMAGE
  IMAGE_TO_IMAGE
  TEXT_TO_VIDEO
  IMAGE_TO_VIDEO
  LIPSYNC
  TEXT_TO_AUDIO
  IMAGE_UPSCALE
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AspectRatio {
  SQUARE
  PORTRAIT
  LANDSCAPE
  WIDE
}

enum TextToImageModel {
  SEEDREAM_V4
  NANO_BANANA
}

enum ImageToImageModel {
  SEEDREAM_V4_EDIT
  NANO_BANANA_EDIT
}

enum VideoModel {
  WAN_2_5
  VEO3_FAST
}
